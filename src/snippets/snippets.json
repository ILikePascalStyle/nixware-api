{
	"Load the config":{
		"prefix": "client.load_config",
		"body": "client.load_config(${1:cfgname})"
	},
	"Save the config":{
		"prefix": "client.save_config",
		"body": "client.save_config(${1:cfgname})",
		"description": "Save the config"
	},
	"Load the script": {
		"prefix": "client.load_script",
		"body": "client.load_script(${1:scriptname})",
		"description": "Load the script"
	},
	"Unload the script": {
		"prefix": "client.unload_script",
		"body": "client.unload_script(${1:scriptname})",
		"description": "Unload the script"
	},
	"Returns current script name": {
		"prefix": "client.get_script_name",
		"body": "client.get_script_name()",
		"description": "Returns current script name"
	},
	"Register the callback": {
		"prefix": "client.register_callback",
		"body": "client.register_callback(${1:event}, ${2:func})",
		"description": "Register the callback"
	},
	"Returns your cheat username": {
		"prefix": "client.get_username",
		"body": "client.get_username()",
		"description": "Returns your nixware username"
	},
	"Pushing notification": {
		"prefix": "client.notify",
		"body": "client.notify(${1:text})",
		"description": "Pushing notification"
	},
	"Returns the unix timestamp": {
		"prefix": "client.get_time_stamp",
		"body": [
			"client.get_time_stamp()"
		],
		"description": "Returns the unix timestamp"
	},
	"Returns the windows time": {
		"prefix": "client.get_system_time",
		"body": [
			"client.get_system_time()"
		],
		"description": "Returns the windows time"
	},
	"Returns true if key pressed": {
		"prefix": "client.is_key_pressed",
		"body": [
			"client.is_key_pressed(${1:key})"
		],
		"description": "Returns true if key pressed"
	},
	"Returns true if key clicked": {
		"prefix": "client.is_key_clicked",
		"body": [
			"client.is_key_clicked(${1:key})"
		],
		"description": "Returns true if key clicked"
	},
	"Returns pattern address": {
		"prefix": "client.find_pattern",
		"body": [
			"client.find_pattern(${1:module}, ${2:pattern})"
		],
		"description": "Returns pattern address"
	},
	"Returns the number of choked commands": {
		"prefix": "clientstate.get_choked_commands",
		"body": [
			"clientstate.get_choked_commands()"
		],
		"description": "Returns the number of choked commands"
	},
	"Forcing cl_fullupdate": {
		"prefix": "clientstate.force_full_update",
		"body": [
			"clientstate.force_full_update()"
		],
		"description": "Forcing cl_fullupdate"
	},
	"Returns the screen size": {
		"prefix": "engine.get_screen_size",
		"body": [
			"engine.get_screen_size()"
		],
		"description": "Returns the screen size"
	},
	"Returns true if connected to server": {
		"prefix": "engine.is_connected",
		"body": [
			"engine.is_connected()"
		],
		"description": "Returns true if connected to server"
	},
	"Returns true if in game": {
		"prefix": "engine.is_in_game",
		"body": [
			"engine.is_in_game()"
		],
		"description": "Returns true if in game"
	},
	"Returns the local player index": {
		"prefix": "engine.get_local_player",
		"body": [
			"engine.get_local_player()"
		],
		"description": "Returns the local player index"
	},
	"Returns the [player_info_t] object": {
		"prefix": "engine.get_player_info",
		"body": [
			"engine.get_player_info(${1:index})"
		],
		"description": "Returns the [player_info_t] object"
	},
	"Returns current level name (example: de_mirage)": {
		"prefix": "engine.get_level_name_short",
		"body": [
			"engine.get_level_name_short()"
		],
		"description": "Returns current level name (example: de_mirage)"
	},
	"Returns the player index from user id": {
		"prefix": "engine.get_player_for_user_id",
		"body": [
			"engine.get_player_for_user_id(${1:userid})"
		],
		"description": "Returns the player index from user id"
	},
	"Setting the viewangles": {
		"prefix": "engine.set_view_angles",
		"body": [
			"engine.set_view_angles(${1:new_viewangles})"
		],
		"description": "Setting the viewangles"
	},
	"Returns the camera angles": {
		"prefix": "engine.get_view_angles",
		"body": [
			"engine.get_view_angles()"
		],
		"description": "Returns the camera angles"
	},
	"Executes command in console": {
		"prefix": "engine.execute_client_cmd",
		"body": [
			"engine.execute_client_cmd(${1:command})"
		],
		"description": "Executes command in console"
	},
	"Returns the highest entity index": {
		"prefix": "entitylist.get_highest_entity_index",
		"body": [
			"entitylist.get_highest_entity_index()"
		],
		"description": "Returns the highest entity index"
	},
	"Returns the local player object": {
		"prefix": "entitylist.get_local_player",
		"body": [
			"entitylist.get_local_player()"
		],
		"description": "Returns the local player object"
	},
	"Returns the [entity_t] object by index": {
		"prefix": "entitylist.get_entity_by_index",
		"body": [
			"entitylist.get_entity_by_index(${1:index})"
		],
		"description": "Returns the [entity_t] object by index"
	},
	"Returns the [entity_t] object by handle": {
		"prefix": "entitylist.get_entity_from_handle",
		"body": [
			"entitylist.get_entity_from_handle(${1:handle})"
		],
		"description": "Returns the [entity_t] object by handle"
	},
	"Returns the players array": {
		"prefix": "entitylist.get_players",
		"body": [
			"entitylist.get_players(${1:type})"
		],
		"description": "Returns the players array\n0 - Enemies\n1 - Teammates\n2 - All\n"
	},
	"Returns the entities array by class name": {
		"prefix": "entitylist.get_entities_by_class",
		"body": [
			"entitylist.get_entities_by_class(${1:classname})"
		],
		"description": "Returns the entities array by class name"
	},
	"Returns the entities array by class id": {
		"prefix": "entitylist.get_entities_by_class_id",
		"body": [
			"entitylist.get_entities_by_class_id(${1:classid})"
		],
		"description": "Returns the entities array by class id"
	},
	"Returns the client time": {
		"prefix": "globalvars.get_real_time",
		"body": [
			"globalvars.get_real_time()"
		],
		"description": "Returns the client time"
	},
	"Returns the frame count": {
		"prefix": "globalvars.get_frame_count",
		"body": [
			"globalvars.get_frame_count()"
		],
		"description": "Returns the frame count"
	},
	"Returns the absolute frame time": {
		"prefix": "globalvars.get_absolute_frametime",
		"body": [
			"globalvars.get_absolute_frametime()"
		],
		"description": "Returns the absolute frame time"
	},
	"Returns the server time": {
		"prefix": "globalvars.get_current_time",
		"body": [
			"globalvars.get_current_time()"
		],
		"description": "Returns the server time"
	},
	"Returns the frame time": {
		"prefix": "globalvars.get_frame_time",
		"body": [
			"globalvars.get_frame_time()"
		],
		"description": "Returns the frame time"
	},
	"Returns the max clients value": {
		"prefix": "globalvars.get_max_clients",
		"body": [
			"globalvars.get_max_clients()"
		],
		"description": "Returns the max clients value"
	},
	"Returns the current tickcount": {
		"prefix": "globalvars.get_tick_count",
		"body": [
			"globalvars.get_tick_count()"
		],
		"description": "Returns the current tickcount"
	},
	"Returns the interval per tick": {
		"prefix": "globalvars.get_interval_per_tick",
		"body": [
			"globalvars.get_interval_per_tick()"
		],
		"description": "Returns the interval per tick"
	},
	"Returns two screen coordinates vec2_t, or nil if the world position is not visible on your screen.": {
		"prefix": "se.world_to_screen",
		"body": [
			"se.world_to_screen(${1:pos})"
		],
		"description": "Returns two screen coordinates vec2_t, or nil if the world position is not visible on your screen."
	},
	"Setting the clantag": {
		"prefix": "se.set_clantag",
		"body": [
			"se.set_clantag(${1:tag})"
		],
		"description": "Setting the clantag"
	},
	"Setting the name": {
		"prefix": "se.set_name",
		"body": [
			"se.set_name(${1:name})"
		],
		"description": "Setting the name"
	},
	"Returns [convar_t] object": {
		"prefix": "se.get_convar",
		"body": [
			"se.get_convar(${1:name})"
		],
		"description": "Returns [convar_t] object"
	},
	"Returns the netvar offset": {
		"prefix": "se.get_netvar",
		"body": [
			"se.get_netvar(${1:table}, ${2:netvar})"
		],
		"description": "Returns the netvar offset"
	},
	"Returns current latency": {
		"prefix": "se.get_latency",
		"body": [
			"se.get_latency()"
		],
		"description": "Returns current latency"
	},
	"Register the event for [fire_game_event] callback": {
		"prefix": "se.register_event",
		"body": [
			"se.register_event(${1:eventname})"
		],
		"description": "Register the event for [fire_game_event] callback"
	},
	"Returns the interface address": {
		"prefix": "se.create_interface",
		"body": [
			"se.create_interface(${1:module_name}, ${2:interface_version})"
		],
		"description": "Returns the interface address"
	},
	"Returns trace object": {
		"prefix": "trace.line",
		"body": [
			"trace.line(${1:skip_entindex}, ${2:mask}, ${3:start_pos}, ${4:end_pos})"
		],
		"description": "Returns trace object"
	},
	"Returns trace object ":{
		"prefix": "trace.hull",
		"body": "trace.hull(${1:mask}, ${2:start_pos}, ${3:end_pos}, ${4:mins}, ${5:maxs}, ${6:trace_type}, ${7:should_hit_entity_callback})",
		"description": "Returns trace object"
	},
	"vec2_t constructor": {
		"prefix": "vec2_t.new",
		"body": [
			"vec2_t.new(${1:x}, ${2:y})"
		],
		"description": "vec2_t constructor"
	},
	"Returns the length of vec2_t": {
		"prefix": "vec2:length",
		"body": [
			":length()"
		],
		"description": "Returns the length of vec2_t"
	},
	"vec3_t constructor": {
		"prefix": "vec3_t.new",
		"body": [
			"vec3_t.new(${1:x}, ${2:y}, ${3:z})"
		],
		"description": "vec3_t constructor"
	},
	"Returns the length of vec3_t": {
		"prefix": "vec3:length",
		"body": [
			":length()"
		],
		"description": "Returns the length of vec3_t"
	},
	"Returns the distance between 2 vectors": {
		"prefix": "vec3:dist_to",
		"body": [
			":dist_to(${1:other})"
		],
		"description": "Returns the distance between 2 vectors"
	},
	"angle_t constructor": {
		"prefix": "angle_t.new",
		"body": [
			"angle_t.new(${1:pitch}, ${2:yaw}, ${3:roll})"
		],
		"description": "angle_t constructor"
	},
	"rect_t constructor": {
		"prefix": "rect_t.new",
		"body": [
			"rect_t.new(${1:left}, ${2:top}, ${3:right}, ${4:bottom})"
		],
		"description": "rect_t constructor"
	},
	"color_t constructor": {
		"prefix": "color_t.new",
		"body": [
			"color_t.new(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})"
		],
		"description": "color_t constructor"
	},
	"Returns the event name": {
		"prefix": "event:get_name",
		"body": [
			":get_name()"
		],
		"description": "Returns the event name"
	},
	"Returns the boolean value from event": {
		"prefix": "event:get_bool",
		"body": [
			":get_bool(${1:key_name}, ${2:def_value})"
		],
		"description": "Returns the boolean value from event"
	},
	"Returns the int value from event": {
		"prefix": "event:get_int",
		"body": [
			":get_int(${1:key_name}, ${2:def_value})"
		],
		"description": "Returns the int value from event"
	},
	"Returns the float value from event": {
		"prefix": "event:get_float",
		"body": [
			":get_float(${1:key_name}, ${2:def_value})"
		],
		"description": "Returns the float value from event"
	},
	"Returns the string from event": {
		"prefix": "event:get_string",
		"body": [
			":get_string(${1:key_name}, ${2:def_value})"
		],
		"description": "Returns the string from event"
	},
	"Changes the bool key value": {
		"prefix": "event:set_bool",
		"body": [
			":set_bool(${1:key_name}, ${2:value})"
		],
		"description": "Changes the bool key value"
	},
	"Changes the int key value": {
		"prefix": "event:set_int",
		"body": [
			":set_int(${1:key_name}, ${2:value})"
		],
		"description": "Changes the int key value"
	},
	"Changes the float key value": {
		"prefix": "event:set_float",
		"body": [
			":set_float(${1:key_name}, ${2:value})"
		],
		"description": "Changes the float key value"
	},
	"Changes the string key value": {
		"prefix": "event:set_string",
		"body": [
			":set_string(${1:key_name}, ${2:value})"
		],
		"description": "Changes the string key value"
	},
	"view_setup_t Camera position": {
		"prefix": "view_setup.camera_pos",
		"body": [
			".camera_pos"
		],
		"description": "Camera position"
	},
	"view_setup_t Pitch view angle": {
		"prefix": "view_setup.pitch",
		"body": [
			".pitch"
		],
		"description": "Pitch view angle"
	},
	"view_setup_t Yaw view angle": {
		"prefix": "view_setup.yaw",
		"body": [
			".yaw"
		],
		"description": "Yaw view angle"
	},
	"view_setup_t Field of view": {
		"prefix": "view_setup.fov",
		"body": [
			".fov"
		],
		"description": "Field of view"
	},
	"usercmd_t send_packet": {
		"prefix": "cmd.send_packet",
		"body": [
			"cmd.send_packet"
		],
		"description": "usercmd_t send_packet"
	},
	"usercmd_t command_number": {
		"prefix": "cmd.command_number",
		"body": [
			"cmd.command_number"
		],
		"description": "usercmd_t command_number"
	},
	"usercmd_t tick_count": {
		"prefix": "cmd.tick_count",
		"body": [
			"cmd.tick_count"
		],
		"description": "usercmd_t tick_count"
	},
	"usercmd_t viewangles": {
		"prefix": "cmd.viewangles",
		"body": [
			"cmd.viewangles"
		],
		"description": "usercmd_t viewangles"
	},
	"usercmd_t forwardmove": {
		"prefix": "cmd.forwardmove",
		"body": [
			"cmd.forwardmove"
		],
		"description": "usercmd_t forwardmove"
	},
	"usercmd_t sidemove": {
		"prefix": "cmd.sidemove",
		"body": [
			"cmd.sidemove"
		],
		"description": "usercmd_t sidemove"
	},
	"usercmd_t upmove": {
		"prefix": "cmd.upmove",
		"body": [
			"cmd.upmove"
		],
		"description": "usercmd_t upmove"
	},
	"usercmd_t buttons": {
		"prefix": "cmd.buttons",
		"body": [
			"cmd.buttons"
		],
		"description": "usercmd_t buttons"
	},
	"usercmd_t random_seed": {
		"prefix": "cmd.random_seed",
		"body": [
			"cmd.random_seed"
		],
		"description": "usercmd_t random_seed"
	},
	"usercmd_t mousedx": {
		"prefix": "cmd.mousedx",
		"body": [
			"cmd.mousedx"
		],
		"description": "usercmd_t mousedx"
	},
	"usercmd_t mousedy": {
		"prefix": "cmd.mousedy",
		"body": [
			"cmd.mousedy"
		],
		"description": "usercmd_t mousedy"
	},
	"Returns the int value": {
		"prefix": "convar:get_int",
		"body": [
			":get_int()"
		],
		"description": "Returns the int value"
	},
	"Returns the float value": {
		"prefix": "convar:get_float",
		"body": [
			":get_float()"
		],
		"description": "Returns the float value"
	},
	"Returns the string": {
		"prefix": "convar:get_string",
		"body": [
			":get_string()"
		],
		"description": "Returns the string"
	},
	"Setting the int value": {
		"prefix": "convar:set_int",
		"body": [
			":set_int(${1:value})"
		],
		"description": "Setting the int value"
	},
	"Setting the float value": {
		"prefix": "convar:set_float",
		"body": [
			":set_float(${1:value})"
		],
		"description": "Setting the float value"
	},
	"Setting the string": {
		"prefix": "convar:set_string",
		"body": [
			":set_string(${1:value})"
		],
		"description": "Setting the string"
	},
	"Returns true if entity is in dormant": {
		"prefix": "entity:is_dormant",
		"body": [
			":is_dormant()"
		],
		"description": "Returns true if entity is in dormant"
	},
	"Returns true if entity is alive": {
		"prefix": "entity:is_alive",
		"body": [
			":is_alive()"
		],
		"description": "Returns true if entity is alive"
	},
	"Returns the bounding box, or nil if the world position is not visible on your screen.": {
		"prefix": "entity:get_bbox",
		"body": [
			":get_bbox()"
		],
		"description": "Returns the bounding box, or nil if the world position is not visible on your screen."
	},
	"Returns the hitbox pos": {
		"prefix": "entity:get_player_hitbox_pos",
		"body": [
			":get_player_hitbox_pos(${1:hitbox_num})"
		],
		"description": "Returns the hitbox pos"
	},
	"Returns the entity index": {
		"prefix": "entity:get_index",
		"body": [
			":get_index()"
		],
		"description": "Returns the entity index"
	},
	"Returns the entity address": {
		"prefix": "entity:get_address",
		"body": [
			":get_address()"
		],
		"description": "Returns the entity address"
	},
	"Returns the boolean value by offset": {
		"prefix": "entity:get_prop_bool",
		"body": [
			":get_prop_bool(${1:offset})"
		],
		"description": "Returns the boolean value by offset"
	},
	"Returns the integer value by offset": {
		"prefix": "entity:get_prop_int",
		"body": [
			":get_prop_int(${1:offset})"
		],
		"description": "Returns the integer value by offset"
	},
	"Returns the float value by offset": {
		"prefix": "entity:get_prop_float",
		"body": [
			":get_prop_float(${1:offset})"
		],
		"description": "Returns the float value by offset"
	},
	"Returns the short value by offset": {
		"prefix": "entity:get_prop_short",
		"body": [
			":get_prop_short(${1:offset})"
		],
		"description": "Returns the short value by offset"
	},
	"Returns the double value by offset": {
		"prefix": "entity:get_prop_double",
		"body": [
			":get_prop_double(${1:offset})"
		],
		"description": "Returns the double value by offset"
	},
	"Returns the vector by offset": {
		"prefix": "entity:get_prop_vector",
		"body": [
			":get_prop_vector(${1:offset})"
		],
		"description": "Returns the vector by offset"
	},
	"Returns the angle by offset": {
		"prefix": "entity:get_prop_angle",
		"body": [
			":get_prop_angle(${1:offset})"
		],
		"description": "Returns the angle by offset"
	},
	"Setting the boolean value by offset": {
		"prefix": "entity:set_prop_bool",
		"body": [
			":set_prop_bool(${1:offset}, ${2:value})"
		],
		"description": "Setting the boolean value by offset"
	},
	"Setting the integer value by offset": {
		"prefix": "entity:set_prop_int",
		"body": [
			":set_prop_int(${1:offset}, ${2:value})"
		],
		"description": "Setting the integer value by offset"
	},
	"Setting the float value by offset": {
		"prefix": "entity:set_prop_float",
		"body": [
			":set_prop_float(${1:offset}, ${2:value})"
		],
		"description": "Setting the float value by offset"
	},
	"Setting the short value by offset": {
		"prefix": "entity:set_prop_short",
		"body": [
			":set_prop_short(${1:offset}, ${2:value})"
		],
		"description": "Setting the short value by offset"
	},
	"Setting the double value by offset": {
		"prefix": "entity:set_prop_double",
		"body": [
			":set_prop_double(${1:offset}, ${2:value})"
		],
		"description": "Setting the double value by offset"
	},
	"Setting the vector by offset": {
		"prefix": "entity:set_prop_vector",
		"body": [
			":set_prop_vector(${1:offset}, ${2:value})"
		],
		"description": "Setting the vector by offset"
	},
	"Setting the angle by offset": {
		"prefix": "entity:set_prop_angle",
		"body": [
			":set_prop_angle(${1:offset}, ${2:value})"
		],
		"description": "Setting the angle by offset"
	},
	"player_info_t steam_id64": {
		"prefix": "player_info.steam_id64",
		"body": [
			".steam_id64"
		],
		"description": "player_info_t steam_id64"
	},
	"player_info_t name": {
		"prefix": "player_info.name",
		"body": [
			".name"
		],
		"description": "player_info_t name"
	},
	"player_info_t user_id": {
		"prefix": "player_info.user_id",
		"body": [
			".user_id"
		],
		"description": "player_info_t user_id"
	},
	"player_info_t is_bot": {
		"prefix": "player_info.is_bot",
		"body": [
			".is_bot"
		],
		"description": "player_info_t is_bot"
	},
	"Is manual shot": {
		"prefix": "shot_info.manual",
		"body": [
			".manual"
		],
		"description": "Is manual shot"
	},
	"Target player": {
		"prefix": "shot_info.target",
		"body": [
			".target"
		],
		"description": "Target player"
	},
	"How many ticks have been backtracked": {
		"prefix": "shot_info.backtrack",
		"body": [
			".backtrack"
		],
		"description": "How many ticks have been backtracked"
	},
	"Shot hitchance": {
		"prefix": "shot_info.hitchance",
		"body": [
			".hitchance"
		],
		"description": "Shot hitchance"
	},
	"Target hitbox": {
		"prefix": "shot_info.hitbox",
		"body": [
			".hitbox"
		],
		"description": "Target hitbox"
	},
	"Server hitgroup (on hit)": {
		"prefix": "shot_info.server_hitgroup",
		"body": [
			".server_hitgroup"
		],
		"description": "Server hitgroup (on hit)"
	},
	"Result of current shot (hit/spread/desync/unk)": {
		"prefix": "shot_info.result",
		"body": [
			".result"
		],
		"description": "Result of current shot (hit/spread/desync/unk)"
	},
	"Expected damage": {
		"prefix": "shot_info.client_damage",
		"body": [
			".client_damage"
		],
		"description": "Expected damage"
	},
	"Actual damage (on hit)": {
		"prefix": "shot_info.server_damage",
		"body": [
			".server_damage"
		],
		"description": "Actual damage (on hit)"
	},
	"Shot tick": {
		"prefix": "shot_info.tick",
		"body": [
			".tick"
		],
		"description": "Shot tick"
	},
	"Did shoot into safe point": {
		"prefix": "shot_info.safe_point",
		"body": [
			".safe_point"
		],
		"description": "Did shoot into safe point"
	},
	"Aimpoint position": {
		"prefix": "shot_info.aim_point",
		"body": [
			".aim_point"
		],
		"description": "Aimpoint position"
	},
	"Returns the cursor position": {
		"prefix": "renderer.get_cursor_pos",
		"body": [
			"renderer.get_cursor_pos()"
		],
		"description": "Returns the cursor position"
	},
	"Creates new font": {
		"prefix": "renderer.setup_font",
		"body": [
			"renderer.setup_font(${1:filename}, ${2:size}, ${3:flags})"
		],
		"description": "Creates new font"
	},
	"Creates new texture": {
		"prefix": "renderer.setup_texture",
		"body": [
			"renderer.setup_texture(${1:filename})"
		],
		"description": "Creates new texture"
	},
	"Drawing the texture": {
		"prefix": "renderer.texture",
		"body": [
			"renderer.texture(${1:tex}, ${2:from}, ${3:to}, ${4:color})"
		],
		"description": "Drawing the texture"
	},
	"Drawing the text": {
		"prefix": "renderer.text",
		"body": [
			"renderer.text(${1:text}, ${2:font}, ${3:pos}, ${4:size}, ${5:color})"
		],
		"description": "Drawing the text"
	},
	"Returns the text size": {
		"prefix": "renderer.get_text_size",
		"body": [
			"renderer.get_text_size(${1:font}, ${2:size}, ${3:text})"
		],
		"description": "Returns the text size"
	},
	"Drawing the line": {
		"prefix": "renderer.line",
		"body": [
			"renderer.line(${1:from}, ${2:to}, ${3:color})"
		],
		"description": "Drawing the line"
	},
	"Drawing the rect": {
		"prefix": "renderer.rect",
		"body": [
			"renderer.rect(${1:from}, ${2:to}, ${3:color})"
		],
		"description": "Drawing the rect"
	},
	"Drawing the filled rect": {
		"prefix": "renderer.rect_filled",
		"body": [
			"renderer.rect_filled(${1:from}, ${2:to}, ${3:color})"
		],
		"description": "Drawing the filled rect"
	},
	"Drawing the faded rect": {
		"prefix": "renderer.rect_filled_fade",
		"body": [
			"renderer.rect_filled_fade(${1:from}, ${2:to}, ${3:col_upr_left}, ${4:col_upr_right}, ${5:col_bot_right}, ${6:col_bot_left})"
		],
		"description": "Drawing the faded rect"
	},
	"Drawing the circle": {
		"prefix": "renderer.circle",
		"body": [
			"renderer.circle(${1:pos}, ${2:radius}, ${3:segments}, ${4:filled}, ${5:color})"
		],
		"description": "Drawing the circle"
	},
	"Drawing the textured polygon": {
		"prefix": "renderer.filled_polygon",
		"body": [
			"renderer.filled_polygon(${1:points}, ${2:color})"
		],
		"description": "Drawing the textured polygon"
	},
	"Disable ragebot on this player": {
		"prefix": "ragebot.ignore_player",
		"body": [
			"ragebot.ignore_player(${1:index})"
		],
		"description": "Disable ragebot on this player"
	},
	"Overrides wall penetration on player": {
		"prefix": "ragebot.override_wall_penetration",
		"body": [
			"ragebot.override_wall_penetration(${1:index}, ${2:penetrate})"
		],
		"description": "Overrides wall penetration on player"
	},
	"Overrides desync correction on player": {
		"prefix": "ragebot.override_desync_correction",
		"body": [
			"ragebot.override_desync_correction(${1:index}, ${2:correct})"
		],
		"description": "Overrides desync correction on player"
	},
	"Overrides hitscan on player": {
		"prefix": "ragebot.override_hitscan",
		"body": [
			"ragebot.override_hitscan(${1:index}, ${2:hitbox}, ${3:scan})"
		],
		"description": "Overrides hitscan on player"
	},
	"Overrides min damage on player": {
		"prefix": "ragebot.override_min_damage",
		"body": [
			"ragebot.override_min_damage(${1:index}, ${2:damage})"
		],
		"description": "Overrides min damage on player"
	},
	"Overrides safepoint mode on player": {
		"prefix": "ragebot.override_safe_point",
		"body": [
			"ragebot.override_safe_point(${1:index}, ${2:mode})"
		],
		"description": "Overrides safepoint mode on player"
	},
	"Overrides max misses on player": {
		"prefix": "ragebot.override_max_misses",
		"body": [
			"ragebot.override_max_misses(${1:index}, ${2:misses})"
		],
		"description": "Overrides max misses on player"
	},
	"Overrides head point scale on player": {
		"prefix": "ragebot.override_head_scale",
		"body": [
			"ragebot.override_head_scale(${1:index}, ${2:scale})"
		],
		"description": "Overrides head point scale on player"
	},
	"Overrides body point scale on player": {
		"prefix": "ragebot.override_body_scale",
		"body": [
			"ragebot.override_body_scale(${1:index}, ${2:scale})"
		],
		"description": "Overrides body point scale on player"
	},
	"Creates checkbox in menu": {
		"prefix": "ui.add_check_box",
		"body": [
			"ui.add_check_box(${1:label}, ${2:var_name}, ${3:def_value})"
		],
		"description": "Creates checkbox in menu"
	},
	"Returns checkbox object from menu": {
		"prefix": "ui.get_check_box",
		"body": [
			"ui.get_check_box(${1:var_name})"
		],
		"description": "Returns checkbox object from menu"
	},
	"Creates int slider in menu": {
		"prefix": "ui.add_slider_int",
		"body": [
			"ui.add_slider_int(${1:label}, ${2:var_name}, ${3:min}, ${4:max}, ${5:def_value})"
		],
		"description": "Creates int slider in menu"
	},
	"Returns slider int object from menu": {
		"prefix": "ui.get_slider_int",
		"body": [
			"ui.get_slider_int(${1:var_name})"
		],
		"description": "Returns slider int object from menu"
	},
	"Creates combo box in menu": {
		"prefix": "ui.add_combo_box",
		"body": [
			"ui.add_combo_box(${1:label}, ${2:var_name}, ${3:items}, ${4:def_value})"
		],
		"description": "Creates combo box in menu"
	},
	"Returns combo box object from menu": {
		"prefix": "ui.get_combo_box",
		"body": [
			"ui.get_combo_box(${1:var_name})"
		],
		"description": "Returns combo box object from menu"
	},
	"Creates multi combo box in menu": {
		"prefix": "ui.add_multi_combo_box",
		"body": [
			"ui.add_multi_combo_box(${1:label}, ${2:var_name}, ${3:items}, ${4:def_values})"
		],
		"description": "Creates combo box in menu"
	},
	"Returns multi combo box object from menu": {
		"prefix": "ui.get_multi_combo_box",
		"body": [
			"ui.get_multi_combo_box(${1:var_name})"
		],
		"description": "Returns multi combo box object from menu"
	},
	"Creates text input in menu": {
		"prefix": "ui.add_text_input",
		"body": [
			"ui.add_text_input(${1:label}, ${2:var_name}, ${4:def_value})"
		],
		"description": "Creates text input in menu"
	},
	"Creates float slider in menu": {
		"prefix": "ui.add_slider_float",
		"body": [
			"ui.add_slider_float(${1:label}, ${2:var_name}, ${3:min}, ${4:max}, ${5:def_value})"
		],
		"description": "Creates float slider in menu"
	},
	"Returns slider float object from menu": {
		"prefix": "ui.get_slider_float",
		"body": [
			"ui.get_slider_float(${1:var_name})"
		],
		"description": "Returns slider float object from menu"
	},
	"Creates key bind in menu": {
		"prefix": "ui.add_key_bind",
		"body": [
			"ui.add_key_bind(${1:label}, ${2:var_name}, ${3:def_key}, ${4:def_mode})"
		],
		"description": "Creates key bind in menu"
	},
	"Returns keybind object from menu": {
		"prefix": "ui.get_key_bind",
		"body": [
			"ui.get_key_bind(${1:var_name})"
		],
		"description": "Returns keybind object from menu"
	},
	"Creates color edit in menu": {
		"prefix": "ui.add_color_edit",
		"body": [
			"ui.add_color_edit(${1:label}, ${2:var_name}, ${3:show_alpha}, ${4:def_color})"
		],
		"description": "Creates color edit in menu"
	},
	"Returns color edit object from menu": {
		"prefix": "ui.get_color_edit",
		"body": [
			"ui.get_color_edit(${1:var_name})"
		],
		"description": "Returns color edit object from menu"
	},
	"Returns true if menu opened": {
		"prefix": "ui.is_visible",
		"body": [
			"ui.is_visible()"
		],
		"description": "Returns true if menu opened"
	},
	"Setting menu visibility": {
		"prefix": "ui.set_visible",
		"body": [
			"ui.set_visible(${1:value})"
		],
		"description": "Setting menu visibility"
	},
	"Returns value from ui checkbox": {
		"prefix": "checkbox:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from ui checkbox"
	},
	"Setting checkbox value": {
		"prefix": "checkbox:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting checkbox value"
	},
	"Setting checkbox visiblity, works only for script variables": {
		"prefix": "checkbox:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting checkbox visiblity, works only for script variables"
	},
	"Setting checkbox label, works only for script variables": {
		"prefix": "checkbox:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting checkbox label, works only for script variables"
	},
	"Returns value from color edit": {
		"prefix": "color_edit:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from color edit"
	},
	"Setting color edit value": {
		"prefix": "color_edit:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting color edit value"
	},
	"Setting color edit visiblity, works only for script variables": {
		"prefix": "color_edit:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting color edit visiblity, works only for script variables"
	},
	"Setting color edit label, works only for script variables": {
		"prefix": "color_edit:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting color edit label, works only for script variables"
	},
	"Returns value from combo box": {
		"prefix": "combo_box:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from combo box"
	},
	"Setting combo box value": {
		"prefix": "combo_box:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting combo box value"
	},
	"Setting combobox visiblity, works only for script variables": {
		"prefix": "combo_box:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting combobox visiblity, works only for script variables"
	},
	"Setting combobox label, works only for script variables": {
		"prefix": "combo_box:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting combobox label, works only for script variables"
	},
	"Setting combobox items, works only for script variables": {
		"prefix": "combo_box:set_items",
		"body": [
			":set_items(${1:items})"
		],
		"description": "Setting combobox items, works only for script variables"
	},
	"Returns value from multi combo box": {
		"prefix": "multi_combo_box:get_value()",
		"body": [
			":get_value(${1:index})"
		],
		"description": "Returns value from multi combo box"
	},
	"Setting multi combo box value": {
		"prefix": "multi_combo_box:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting multi combo box value"
	},
	"Setting multi combo box visiblity, works only for script variables": {
		"prefix": "multi_combo_box:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting multi combo box visiblity, works only for script variables"
	},
	"Setting multi combo box label, works only for script variables": {
		"prefix": "multi_combo_box:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting multi combo box label, works only for script variables"
	},
	"Setting multi combo box items, works only for script variables": {
		"prefix": "multi_combo_box:set_items",
		"body": [
			":set_items(${1:items})"
		],
		"description": "Setting multi combo box items, works only for script variables"
	},
	"Returns the key code from keybind": {
		"prefix": "key_bind:get_key",
		"body": [
			":get_key()"
		],
		"description": "Returns the key code from keybind"
    },
    "Returns keybind type": {
		"prefix": "key_bind:get_type",
		"body": [
			":get_type()"
		],
		"description": "Returns keybind type"
    },
    "Setting the key for keybind": {
		"prefix": "key_bind:set_key",
		"body": [
			":set_key(${1:key})"
		],
		"description": "Setting the key for keybind"
    },
    "Setting the type for keybind": {
		"prefix": "key_bind:set_type",
		"body": [
			":set_type(${1:type})"
		],
		"description": "Setting the type for keybind"
    },
    "Returns keybind state": {
		"prefix": "key_bind:is_active",
		"body": [
			":is_active()"
		],
		"description": "Returns keybind state"
	},
	"Setting keybind visiblity, works only for script variables": {
		"prefix": "key_bind:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting keybind visiblity, works only for script variables"
	},
	"Setting keybind label, works only for script variables": {
		"prefix": "key_bind:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting keybind label, works only for script variables"
	},
    "Returns value from slider float": {
		"prefix": "slider_float:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from slider float"
	},
	"Setting slider float value": {
		"prefix": "slider_float:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting slider float value"
	},
	"Setting slider float visiblity, works only for script variables": {
		"prefix": "slider_float:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting slider float visiblity, works only for script variables"
	},
	"Setting slider float label, works only for script variables": {
		"prefix": "slider_float:set_label",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting slider float label, works only for script variables"
	},
    "Returns value from slider int": {
		"prefix": "slider_int:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from slider int"
	},
	"Setting slider int value": {
		"prefix": "slider_int:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting slider int value"
	},
	"Setting slider int visiblity, works only for script variables": {
		"prefix": "slider_int:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting slider int visiblity, works only for script variables"
	},
	"Setting slider int label, works only for script variables": {
		"prefix": "slider_int:set_label",
		"body": [
			":set_label(${1:val})"
		],
		"description": "Setting slider int label, works only for script variables"
	},
    "Returns value from text input": {
		"prefix": "text_input:get_value()",
		"body": [
			":get_value()"
		],
		"description": "Returns value from text input"
	},
	"Setting text input value": {
		"prefix": "text_input:set_value",
		"body": [
			":set_value(${1:val})"
		],
		"description": "Setting text input value"
	},
	"Setting text input visiblity, works only for script variables": {
		"prefix": "text_input:set_visible",
		"body": [
			":set_visible(${1:val})"
		],
		"description": "Setting text input visiblity, works only for script variables"
	},
	"Setting text input label, works only for script variables": {
		"prefix": "text_input:set_label()",
		"body": [
			":set_label(${1:label})"
		],
		"description": "Setting text input label, works only for script variables"
	}
}
